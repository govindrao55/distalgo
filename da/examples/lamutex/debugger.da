import sys
import time
import pdb
import os

config(channel is fifo, clock is lamport)

class ForkedPdb(pdb.Pdb):
    _original_stdin_fd = sys.stdin.fileno()
    _original_stdin = None

    def __init__(self):
        pdb.Pdb.__init__(self, nosigint=True)

    def _cmdloop(self):
        current_stdin = sys.stdin
        try:
            if not self._original_stdin:
                self._original_stdin = os.fdopen(self._original_stdin_fd)
            sys.stdin = self._original_stdin
            self.cmdloop()
        finally:
            sys.stdin = current_stdin


class Debugger(process):
    def setup(ps:set):  # debug_ps is set of all processes to be debugged
        self.ps = ps
        self.debug_ps = set()
            
    def receive(msg= ('debug_req', i, p)):
        output('debug recieved1: ', p)
        output('debugger'   ,i)
        send(('continue'+str(i), self), to=ps - debug_ps)
        send(('debug'+str(i), self), to=debug_ps)

    def receive(msg= ('debug_pid', p)):
        output('debug recieved2: ', p)
        self.debug_ps=p
        output('debug recieved3: ', self.debug_ps)       
        
    def run():
        output('process started')
        output('Process set:', self.ps)
        await(received(('done'), from_=parent()))
        output('terminating Controller')

class Helper:

    def debug_ask(self,ps:set):
        print(ps)
        pids = input("Enter the index the pids to debug (comma seperated): " + str(ps));
        int_pids = set()
        for pid in pids.split(','):
            int_pids.add(int(pid))
        
        debug_ps=set()
        for i in range(len(ps)):
            if i in int_pids:
                debug_ps.add(list(ps)[i])
        print('Debug Set: ', debug_ps)
        return debug_ps
